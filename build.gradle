buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'idea'
apply plugin: 'maven-publish'

/*
//https://plugins.gradle.org/plugin/net.ltgt.apt
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.9"
    }
}
apply plugin: "net.ltgt.apt"

//https://docs.gradle.org/current/userguide/idea_plugin.html
apply plugin: 'idea'*/

version = "1.14.4-0.3.0"
group= "com.corwinjv.mobtotems" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "mobtotems"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20190719-1.14.3'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

/*// Jacoco offline instrumentation to cover PowerMock classes
configurations {
    jacoco
    jacocoRuntime
}*/

repositories {
        jcenter()
        mavenCentral()
		maven { url 'http://tehnut.info/maven/' }
}

dependencies {
	// Guide-api (not supported on 1.14 *gasp*)
	//deobfCompile "info.amerifrance.guideapi:Guide-API:1.12-2.1.4-57"

    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.14.4-28.0.45'

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    // Unit Testing
    //testCompile "junit:junit:4.12"
    //testCompile "org.mockito:mockito-core:2.4.5"
    //testCompile 'org.powermock:powermock:1.6.6'
    //testCompile 'org.powermock:powermock-api-mockito2:1.7.0RC4'
    //testCompile 'org.powermock:powermock-module-junit4:1.7.0RC4'

    //Dagger 2
    //compile "com.google.dagger:dagger:2.8"
    //testCompile "com.google.dagger:dagger:2.8"
    //apt "com.google.dagger:dagger-compiler:2.8"
    //testApt "com.google.dagger:dagger-compiler:2.8"

    // offline jacoco
    //jacoco group: 'org.jacoco', name: 'org.jacoco.ant', version: '0.7.9', classifier: 'nodeps'
    //jacocoRuntime group: 'org.jacoco', name: 'org.jacoco.agent', version: '0.7.9', classifier: 'runtime'
}

//processResources
//{
    // this will ensure that this task is redone when the versions change.
//    inputs.property "version", project.version
//    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
//    from(sourceSets.main.resources.srcDirs) {
//        include 'mcmod.info'

        // replace version and mcversion
//        expand 'version':project.version, 'mcversion':project.minecraft.version
 //   }

    // copy everything else, thats not the mcmod.info
//    from(sourceSets.main.resources.srcDirs) {
//        exclude 'mcmod.info'
//    }
//}
// offline jacoco (Yes we're using ant...)
//task instrument(dependsOn: ['classes']) {
//    ext.outputDir = buildDir.path + '/classes-instrumented'
//    doLast {
//        ant.taskdef(name: 'instrument',
//                classname: 'org.jacoco.ant.InstrumentTask',
//                classpath: configurations.jacoco.asPath)
//        ant.instrument(destdir: outputDir) {
//            fileset(dir: sourceSets.main.output.classesDir) {
//                exclude(name: "**/*Test*.class")
//                exclude(name: "baubles/**/*.class")
//                exclude(name: "com/corwinjv/di/**.class")
//                exclude(name: "com/corwinjv/di/**/*.class")
//            }
//        }
//    }
//}

//gradle.taskGraph.whenReady { graph ->
//    if (graph.hasTask(instrument)) {
//        tasks.withType(Test) {
//            doFirst {
//                systemProperty 'jacoco-agent.destfile', buildDir.path + '/jacoco/tests.exec'
//                classpath = files(instrument.outputDir) + classpath + configurations.jacocoRuntime
//            }
//        }
//    }
//}

//task report(dependsOn: ['instrument', 'test']) {
//    doLast {
//        ant.taskdef(name: 'report',
//                classname: 'org.jacoco.ant.ReportTask',
//                classpath: configurations.jacoco.asPath)
//        ant.report() {
//            executiondata {
//                ant.file(file: buildDir.path + '/jacoco/tests.exec')
//            }
//            structure(name: 'MobTotems') {
//                classfiles {
//                    fileset(dir: sourceSets.main.output.classesDir) {
//                        exclude(name: "**/*Test*.class")
//                        exclude(name: "baubles/**/*.class")
//                        exclude(name: "com/corwinjv/di/**.class")
//                        exclude(name: "com/corwinjv/di/**/*.class")
//                    }
//                }
//                sourcefiles {
//                    fileset(dir: 'src/main/java/')
//                }
//            }
//            html(destdir: buildDir.path + '/reports/jacoco')
//        }
//    }
//}

// Example for how to get properties into the manifest for reading by the runtime..
//jar {
//    manifest {
//        attributes([
//            "Specification-Title": "examplemod",
//            "Specification-Vendor": "examplemodsareus",
//            "Specification-Version": "1", // We are version 1 of ourselves
//            "Implementation-Title": project.name,
//            "Implementation-Version": "${version}",
//            "Implementation-Vendor" :"examplemodsareus",
//            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
//        ])
//    }
//}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
//def reobfFile = file("$buildDir/reobfJar/output.jar")
//def reobfArtifact = artifacts.add('default', reobfFile) {
//    type 'jar'
//    builtBy 'reobfJar'
//}
//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            artifact reobfArtifact
//        }
//    }
//    repositories {
//        maven {
//            url "file:///${project.projectDir}/mcmodsrepo"
//        }
//    }
//}

